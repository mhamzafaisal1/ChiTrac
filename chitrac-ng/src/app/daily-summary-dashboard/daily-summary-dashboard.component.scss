:host {
    display: block;
    width: 100%;
    height: 100%;
  }
  
  .scroll-wrapper {
    width: 100%;
    height: 100%;
    overflow: auto;
    display: flex;
    flex-direction: column;
  }
  
  .container {
    padding: 1rem;
    width: 100%;
    height: 100%;
    box-sizing: border-box;
    display: flex;
    max-width: 100% !important; // ← break any global constraint
    flex: 1 1 auto;             // ← allow it to grow
    width: 100vw;               // ← stretch to full viewport width
    flex-direction: column;
    gap: 1rem;
    position: relative;
    margin: 0;
    align-items: stretch;
  
    &.dark-mode {
      background-color: #1f1f1f;
      color: #e0e0e0;
    }
  
  
    &:not(.dark-mode) {
      background-color: #ffffff;
      color: #000000;
    }
  }

  .tables-wrapper {
    position: relative;
    flex: 1;
    overflow: auto;
    width: 100%;
  }

  .table-container {
    flex: 1;
    overflow: auto;
    background-color: var(--surface-color, #ffffff);
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    position: relative;

    &.loading::after {
      content: '...';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      font-size: 1.25rem;
      font-weight: 500;
      background-color: rgba(255, 255, 255, 0.7);
      color: #000;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 2;
    }
  }

  .loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(255, 255, 255, 0.8);
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(2px);
  }

  .loading-content {
    text-align: center;
  }

  .loading-spinner {
    border: 4px solid #ccc;
    border-top: 4px solid #3f51b5;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 0.8s linear infinite;
    margin: auto;
    
    // For dummy row loading spinner
    &.dummy-row {
      border: none;
      width: auto;
      height: auto;
      margin: 0;
      display: inline-block;
      animation: spin 1s linear infinite;
      font-size: 16px;
      color: #3f51b5;
    }
  }

  .loading-text {
    margin-top: 12px;
    font-weight: 500;
    font-size: 16px;
    color: #3f51b5;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  

  .tables-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
    width: 100%;
    max-width: 100%;
    position: relative;
    min-height: 400px; // Ensure minimum height for overlay visibility
  }

  .empty-state {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    min-height: 400px;
    width: 100%;
    grid-column: 1 / -1; // Span all columns
  }

  .empty-content {
    text-align: center;
    color: #666;
  }

  .empty-text {
    font-size: 1.1rem;
    font-weight: 500;
  }
  
  .table-section {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
  
    h2 {
      margin-bottom: 0.5rem;
      font-size: 1.2rem;
      font-weight: 600;
      border-bottom: 2px solid currentColor;
      padding-bottom: 0.25rem;
    }
  
    base-table {
      width: 100%;
      height: 100%;
      overflow-x: auto;
      flex: 1;
    }
  }
  
  @media (max-width: 768px) {
    .tables-container {
      flex-direction: column;
    }
  }
  
  .hoverable {
    ::ng-deep {
      .mat-row {
        &:hover {
          background-color: rgba(0, 0, 0, 0.04);
          cursor: pointer;
        }
      }
    }
  }

  .dark-mode {
    .hoverable {
      ::ng-deep {
        .mat-row {
          &:hover {
            background-color: rgba(255, 255, 255, 0.04);
          }
        }
      }
    }
  }

  :host-context(.dark-theme) {
    .table-container {
      background-color: var(--surface-color, #1e1e1e);

      &.loading::after {
        background-color: rgba(0, 0, 0, 0.7);
        color: #fff;
      }
    }

    .loading-overlay {
      background-color: rgba(0, 0, 0, 0.8);
    }

    .loading-text {
      color: #90caf9;
    }
  }
  
// Add styling for dummy rows to make text transparent
:host ::ng-deep {
  .mat-row {
    cursor: pointer;
    transition: background-color 0.2s ease;

    &:hover {
      background-color: var(--hover-color, rgba(0, 0, 0, 0.04));
    }

    &.selected {
      background-color: var(--selected-color, rgba(0, 0, 0, 0.08));
    }

    // Make dummy row text transparent
    &.dummy-row {
      .mat-cell {
        color: transparent !important;
        
        // Keep the loading spinner visible
        .loading-spinner.dummy-row {
          color: #3f51b5 !important;
        }
      }
    }
  }
}

:host ::ng-deep {
  .mat-row.dummy-row {
    pointer-events: none;

    .mat-cell {
      // Make cell content fully transparent
      color: transparent !important;
      background-color: transparent !important;
      border-color: transparent !important;

      // Optional: Reduce shimmer bleeding through
      &::after {
        display: none !important;
      }

      // If you're injecting a spinner (⏳) directly via innerHTML:
      .loading-spinner.dummy-row {
        color: #3f51b5 !important;
        background-color: transparent !important;
      }
    }
  }
}

// More aggressive approach - target any text content in dummy rows
:host ::ng-deep {
  .dummy-row {
    .mat-cell {
      color: transparent !important;
      
      // Hide any text content except spinners
      &:not(:has(.loading-spinner)) {
        color: transparent !important;
        font-size: 0 !important;
        line-height: 0 !important;
      }
      
      // Keep spinners visible
      .loading-spinner {
        color: #3f51b5 !important;
        font-size: 16px !important;
        line-height: normal !important;
      }
    }
  }
}

// Alternative approach - hide all text content in dummy rows
:host ::ng-deep {
  .dummy-row .mat-cell {
    color: transparent !important;
    
    // Hide any text that's not a spinner
    &:not(:has(.loading-spinner)) {
      visibility: hidden !important;
    }
    
    // Show only spinner content
    .loading-spinner {
      visibility: visible !important;
      color: #3f51b5 !important;
    }
  }
}

// Nuclear option - hide ALL text in dummy rows except spinners
:host ::ng-deep {
  .dummy-row {
    .mat-cell {
      color: transparent !important;
      font-size: 0 !important;
      
      // Only show spinner content
      .loading-spinner {
        font-size: 16px !important;
        color: #3f51b5 !important;
        display: inline-block !important;
      }
    }
  }
}

// Target any text content that might be showing
:host ::ng-deep {
  .dummy-row .mat-cell:not(:has(.loading-spinner)) {
    color: transparent !important;
    font-size: 0 !important;
    line-height: 0 !important;
    padding: 0 !important;
    margin: 0 !important;
  }
}

// More compatible approach - hide all text in dummy rows
:host ::ng-deep {
  .dummy-row .mat-cell {
    color: transparent !important;
    font-size: 0 !important;
    
    // Only show spinner content
    .loading-spinner {
      font-size: 16px !important;
      color: #3f51b5 !important;
      display: inline-block !important;
    }
  }
}

// Hide any text that contains "Loading..."
:host ::ng-deep {
  .mat-mdc-row.dummy-row .mat-mdc-cell {
    color: transparent !important;
    
    .loading-spinner.dummy-row {
      color: #3f51b5 !important;
    }
  }
}


  